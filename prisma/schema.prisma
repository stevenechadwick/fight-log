generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Character {
  AKI
  AKUMA
  BLANKA
  CAMMY
  CHUN_LI
  DEE_JAY
  DHALSIM
  ED
  E_HONDA
  GUILE
  JAMIE
  JP
  JURI
  KEN
  KIMBERLY
  LILY
  LUKE
  MANON
  MARISA
  RASHID
  RYU
  ZANGIEF
}

enum Leagues {
  ROOKIE_1
  ROOKIE_2
  ROOKIE_3
  ROOKIE_4
  ROOKIE_5
  IRON_1
  IRON_2
  IRON_3
  IRON_4
  IRON_5
  BRONZE_1
  BRONZE_2
  BRONZE_3
  BRONZE_4
  BRONZE_5
  SILVER_1
  SILVER_2
  SILVER_3
  SILVER_4
  SILVER_5
  GOLD_1
  GOLD_2
  GOLD_3
  GOLD_4
  GOLD_5
  PLATINUM_1
  PLATINUM_2
  PLATINUM_3
  PLATINUM_4
  PLATINUM_5
  DIAMOND_1
  DIAMOND_2
  DIAMOND_3
  DIAMOND_4
  DIAMOND_5
  MASTER
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime?
  name          String?   @unique
  password      String
  sets          Set[]
  accounts      Account[]
  sessions      Session[]
  games         Game[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model SetNote {
  id      String @id @default(cuid())
  content String
  set     Set    @relation(fields: [setId], references: [id])
  setId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Game {
  id      String  @id @default(cuid())
  set     Set     @relation(fields: [setId], references: [id])
  setId   String
  rounds  Int // Binary representation of the rounds (e.g., 11 for win-win, 00 for lose-lose, 101 for win-lose-win, 010 for lose-win-lose)
  win     Boolean
  owner   User    @relation(fields: [ownerId], references: [id])
  ownerId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Set {
  id                 String    @id @default(cuid())
  owner              User      @relation(fields: [ownerId], references: [id])
  ownerId            String
  notes              SetNote[]
  games              Game[]
  player_character   Character
  opponent_character Character
  league             Leagues
  rating             Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
